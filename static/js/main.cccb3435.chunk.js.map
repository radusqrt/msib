{"version":3,"sources":["components/Message.js","components/Progress.js","components/FileUpload.js","components/RecommendationTable.js","components/Credits.js","components/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Message","msg","className","role","type","data-dismiss","aria-label","aria-hidden","Progress","percentage","style","width","FileUpload","props","callback","useState","file","setFile","filename","setFilename","message","setMessage","uploadPercentage","setUploadPercentage","onSubmit","e","a","preventDefault","formData","FormData","append","axios","post","headers","onUploadProgress","progressEvent","parseInt","Math","round","loaded","total","setTimeout","res","recommendation","data","response","status","id","onChange","target","files","name","htmlFor","value","mapToTitle","angio","regenerare","adn","microbiom","imunitate","keyToColumnName","styles","backgroundColor","RecommendationTable","Object","keys","map","key","toLowerCase","Table","dark","column_key","includes","sample","JSON","stringify","Example","Jumbotron","borderColor","borderWidth","borderStyle","icon","iconColor","iconSize","roundness","url","size","Button","color","onClick","window","open","Homepage","setRecommendation","href","rel","Credits","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.cccb3435.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Message = ({ msg }) => {\n  return (\n    <div className=\"alert alert-info alert-dismissible fade show\" role=\"alert\">\n      {msg}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n};\n\nMessage.propTypes = {\n  msg: PropTypes.string.isRequired,\n};\n\nexport default Message;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Progress = ({ percentage }) => {\n  return (\n    <div className=\"progress\">\n      <div\n        className=\"progress-bar progress-bar-striped bg-success\"\n        role=\"progressbar\"\n        style={{ width: `${percentage}%` }}\n      >\n        {percentage}%\n      </div>\n    </div>\n  );\n};\n\nProgress.propTypes = {\n  percentage: PropTypes.number.isRequired,\n};\n\nexport default Progress;\n","import React, { Fragment, useState } from \"react\";\nimport Message from \"./Message\";\nimport Progress from \"./Progress\";\nimport axios from \"axios\";\n\nconst FileUpload = (props) => {\n  const { callback } = props;\n\n  const [file, setFile] = useState(\"\");\n  const [filename, setFilename] = useState(\"Alege fișier\");\n  const [message, setMessage] = useState(\"\");\n  const [uploadPercentage, setUploadPercentage] = useState(0);\n\n  const onChange = (e) => {\n    setFile(e.target.files[0]);\n    setFilename(e.target.files[0].name);\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    try {\n      const res = await axios.post(\n        // \"http://msib-api.herokuapp.com/upload\",\n        \"https://msib-api.herokuapp.com/upload\",\n        formData,\n        {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n          },\n          onUploadProgress: (progressEvent) => {\n            setUploadPercentage(\n              parseInt(\n                Math.round((progressEvent.loaded * 100) / progressEvent.total)\n              )\n            );\n\n            // Clear percentage\n            setTimeout(() => setUploadPercentage(0), 10000);\n          },\n        }\n      );\n\n      const recommendation = res.data;\n\n      callback(recommendation);\n\n      setMessage(\n        \"Recomandări generate. Dacă doriți să generați din nou apăsați iar 'Încarcă'!\"\n      );\n    } catch (err) {\n      callback(null);\n      if (err.response.status === 500) {\n        setMessage(\"There was a problem with the server\");\n      } else {\n        setMessage(err.response.data);\n      }\n    }\n  };\n\n  return (\n    <Fragment>\n      {message ? <Message msg={message} /> : null}\n      <form onSubmit={onSubmit}>\n        <div className=\"custom-file mb-4\">\n          <input\n            type=\"file\"\n            className=\"custom-file-input\"\n            id=\"customFile\"\n            onChange={onChange}\n          />\n          <label className=\"custom-file-label\" htmlFor=\"customFile\">\n            {filename}\n          </label>\n        </div>\n\n        <Progress percentage={uploadPercentage} />\n\n        <input\n          type=\"submit\"\n          value=\"Încarcă\"\n          className=\"btn btn-primary btn-block mt-4\"\n        />\n      </form>\n    </Fragment>\n  );\n};\n\nexport default FileUpload;\n","import React from \"react\";\nimport { Table } from \"reactstrap\";\n\nconst mapToTitle = {\n  angio: \"Angiogeneza sau Antiangiogeneza\",\n  regenerare: \"Regenerarea\",\n  adn: \"Protecția ADN-ului\",\n  microbiom: \"Microbiomul\",\n  imunitate: \"Imunitatea\",\n};\n\nconst keyToColumnName = {\n  angio: [\"Angiogeneza\", \"Antiangiogeneza\"],\n  regenerare: [\"Regenerare\"],\n  microbiom: [\"Microbiom\"],\n  adn: [\"ADN\"],\n  imunitate: [\"Imunitate\"],\n};\n\nconst styles = {\n  backgroundColor: \"lightblue\",\n};\n\nconst RecommendationTable = (props) => {\n  const { recommendation } = props;\n\n  return (\n    <div>\n      {recommendation\n        ? Object.keys(recommendation).map((key) => (\n            <div key={key}>\n              {\" \"}\n              &nbsp;\n              <h4>Alimente care stimulează: {mapToTitle[key].toLowerCase()}</h4>\n              <Table dark>\n                <thead>\n                  <tr>\n                    {Object.keys(recommendation[key][0]).map((column_key) => (\n                      <th\n                        key={column_key}\n                        style={\n                          keyToColumnName[key].includes(column_key)\n                            ? styles\n                            : null\n                        }\n                      >\n                        {column_key}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {recommendation[key].map((sample) => (\n                    <tr key={JSON.stringify(sample)}>\n                      {Object.keys(sample).map((column_key) => (\n                        <td\n                          key={JSON.stringify(sample) + column_key}\n                          style={\n                            keyToColumnName[key].includes(column_key)\n                              ? styles\n                              : null\n                          }\n                        >\n                          {sample[column_key]}\n                        </td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </div>\n          ))\n        : null}\n    </div>\n  );\n};\n\nexport default RecommendationTable;\n","import React from \"react\";\nimport { Jumbotron, Button } from \"reactstrap\";\nimport { SocialMediaIconsReact } from \"social-media-icons-react\";\n\nconst Example = (props) => {\n  return (\n    <div>\n      &nbsp;\n      <Jumbotron>\n        <h1 className=\"display-3\">Apreciere</h1>\n        <p className=\"lead\">\n          Tot ce am făcut eu a fost să automatizez cunoștințele obținute din\n          cartea <em>Mănâncă și învinge boala, William W. Li</em>. Meritele se\n          duc în întregime către autorul acestei cărți pe care o recomand\n          tuturor celor care vor să devină mai sănătoși.\n        </p>\n        <hr className=\"my-2\" />\n        <p>\n          <b>Atenție!</b> Nu am niciun studiu în vreun domeniu medical și nici\n          nu presupun că aceasta este o dietă <em>minune</em>. Interesați-vă cu\n          seriozitate înainte de a vă schimba stilul de viață! <br />\n          Dacă aveți feedback și doriți să mă contactați, lăsați-mi un e-mail la\n          adresa <b>radu.stochitoiu@gmail.com</b> sau un mesaj pe rețelele de\n          socializare.\n          <SocialMediaIconsReact\n            borderColor=\"rgba(0,0,0,0.25)\"\n            borderWidth=\"3\"\n            borderStyle=\"solid\"\n            icon=\"facebook\"\n            iconColor=\"rgba(255,255,255,1)\"\n            backgroundColor=\"rgba(34,200,237,1)\"\n            iconSize=\"5\"\n            roundness=\"26%\"\n            url=\"https://www.facebook.com/radu.stochitoiu\"\n            size=\"40\"\n          />{\" \"}\n          <SocialMediaIconsReact\n            borderColor=\"rgba(0,0,0,0.25)\"\n            borderWidth=\"4\"\n            borderStyle=\"solid\"\n            icon=\"instagram\"\n            iconColor=\"rgba(255,255,255,1)\"\n            backgroundColor=\"rgba(237,34,98,0.93)\"\n            iconSize=\"3\"\n            roundness=\"26%\"\n            url=\"https://instagram.com/radusqrt\"\n            size=\"40\"\n          />\n        </p>\n\n        <p className=\"lead\">\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              const url =\n                \"https://www.goodreads.com/book/show/40697523-eat-to-beat-disease?from_search=true&from_srp=true&qid=KpGkbdzeyG&rank=1\";\n              window.open(url, \"_blank\");\n            }}\n          >\n            Vezi cartea pe Goodreads\n          </Button>\n        </p>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Example;\n","import React, { useState } from \"react\";\nimport FileUpload from \"./FileUpload\";\nimport RecommendationTable from \"./RecommendationTable\";\nimport Credits from \"./Credits\";\n\nconst Homepage = () => {\n  const [recommendation, setRecommendation] = useState(null);\n  return (\n    <div>\n      <h4>\n        Pentru a vă genera un set aleatoriu de alimente care vă plac și care\n        stimulează toți cei cinci stâlpi ai sănătății (angiogeneza, regenerarea,\n        microbiomul, protecția ADN-ului și imunitatea), descărcați tabelul de{\" \"}\n        <a\n          href=\"https://docs.google.com/spreadsheets/d/14A7PC1KYCFOYDbQ4iNCT7IO6pR-T4zQSVe8Uo7EgxYE/edit?usp=sharing\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          aici\n        </a>{\" \"}\n        sub format <b>.xlsx</b> sau <b>.csv</b>, marcați cu <b>DA</b> toate\n        alimentele care vă plac și încărcați-l folosind formularul de mai jos.\n      </h4>\n      &nbsp;\n      <FileUpload callback={setRecommendation} />\n      <RecommendationTable recommendation={recommendation} />\n      <Credits />\n    </div>\n  );\n};\n\nexport default Homepage;\n","import React from \"react\";\nimport \"./App.css\";\nimport Homepage from \"./components/Homepage\";\n\nconst App = () => (\n  <div className=\"container mt-4\">\n    <h4 className=\"display-4 text-center mb-4\">\n      Mănâncă și învinge boala - Generator\n    </h4>\n    <Homepage />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}